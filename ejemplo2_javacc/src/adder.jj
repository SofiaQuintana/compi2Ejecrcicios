options {
	STATIC = false;
}

PARSER_BEGIN(Adder)
        
    public class Adder {
            private Integer valx;
            private Integer valy;
            private Integer valz;

            public Adder(Integer valx,Integer valy,Integer valz){
                this.valx=valx;
                this.valy=valy;
                this.valz=valz;
            }

           public Integer getValx(){
            return this.valx;
           }
           public Integer getValy(){
            return this.valy;
           }
            public Integer getValz(){
            return this.valz;
           }
    }

PARSER_END(Adder)

SKIP  : { " " | "\n" | "\r" | "\r\n" }
TOKEN : { < MAS : "+" > | < MENOS : "-" > | < MUL : "*" > | < DIV : "/" >}
TOKEN : { < LETRAX : "X" > | < LETRAY : "Y" > | < LETRAZ : "Z" >}
TOKEN : { < IGUAL : "=" > }
TOKEN : { < PUNTOCOMA : ";" > | < COMA : "," >}
TOKEN : { < NUMBER : (["0"-"9"])+ > }
TOKEN : { <IDENTIFIER: <LETTER>(<LETTER>|<NUMBER>)*> | <LETTER: (["a"-"z","A"-"Z"])>|<CADENA: ("\"")<IDENTIFIER>("\"")>}

void Start(): {Adder letterValues; Integer result;}{
    letterValues = Z() result = X(letterValues) { System.out.println("El resultado es: " + result); }
}

Adder Z():{Token valx;Token valy;Token valz;}{
    <LETRAX> <IGUAL> valx=<NUMBER> <COMA> <LETRAY> <IGUAL> valy=<NUMBER> <COMA> <LETRAZ> <IGUAL> valz=<NUMBER> <PUNTOCOMA> {return new Adder(Integer.parseInt(valx.image),Integer.parseInt(valy.image),Integer.parseInt(valz.image));}
}

int X(Adder letterValues):{Integer result; Integer value;}{    
    value = T(letterValues) result = XP(letterValues, value) { return result; } 
}

int XP(Adder letterValues, Integer value):{Integer result; Integer number;}{
    <MAS> number = T(letterValues) result = XP(letterValues, value + number) { return result; }
    |<MENOS> number = T(letterValues) result = XP(letterValues, value - number) { return result; }
    |   { return result; }
}

int T(Adder letterValues):{Integer result; Integer value;}{
    value=F(letterValues) result=TP(value,letterValues)  {return result;}
}

int TP(Integer value,Adder letterValues):{Integer number;Integer result;}{
 <MUL> number=F(letterValues) result=TP(value*number,letterValues)  {return result;}
    | <DIV> number=F(letterValues) result=TP(value/number,letterValues) {return result;}                       
    | {return value;}                                                    
}

int F(Adder letterValues):{Token number;}{
    number=<NUMBER> {return Integer.parseInt(number.image);}
    |<LETRAX> {return letterValues.getValx();}
    |<LETRAY> {return letterValues.getValy();}
    |<LETRAZ> {return letterValues.getValz();}
}

